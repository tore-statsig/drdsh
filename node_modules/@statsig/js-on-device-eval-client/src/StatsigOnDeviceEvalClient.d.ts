import { DataAdapterAsyncOptions, DataAdapterSyncOptions, DownloadConfigSpecsResponse, DynamicConfig, DynamicConfigEvaluationOptions, Experiment, ExperimentEvaluationOptions, FeatureGate, FeatureGateEvaluationOptions, Layer, LayerEvaluationOptions, OnDeviceEvaluationsContext, OnDeviceEvaluationsInterface, SpecsDataAdapter, StatsigClientBase, StatsigEvent, StatsigUpdateDetails, StatsigUser } from '@statsig/client-core';
import { StatsigOptions } from './StatsigOptions';
declare global {
    interface Window {
        statsigConfigSpecs: DownloadConfigSpecsResponse | undefined;
    }
}
type AsyncUpdateOptions = DataAdapterAsyncOptions;
type SyncUpdateOptions = DataAdapterSyncOptions;
export default class StatsigOnDeviceEvalClient extends StatsigClientBase<SpecsDataAdapter> implements OnDeviceEvaluationsInterface {
    private _store;
    private _evaluator;
    private _network;
    private _sdkInstanceID;
    static instance(sdkKey?: string): StatsigOnDeviceEvalClient;
    constructor(sdkKey: string, options?: StatsigOptions | null);
    initializeSync(options?: SyncUpdateOptions): StatsigUpdateDetails;
    initializeAsync(options?: AsyncUpdateOptions): Promise<StatsigUpdateDetails>;
    updateSync(options?: SyncUpdateOptions): StatsigUpdateDetails;
    updateAsync(options?: AsyncUpdateOptions): Promise<StatsigUpdateDetails>;
    getContext(): OnDeviceEvaluationsContext;
    checkGate(name: string, user: StatsigUser, options?: FeatureGateEvaluationOptions): boolean;
    getFeatureGate(name: string, user: StatsigUser, options?: FeatureGateEvaluationOptions): FeatureGate;
    getDynamicConfig(name: string, user: StatsigUser, options?: DynamicConfigEvaluationOptions): DynamicConfig;
    getExperiment(name: string, user: StatsigUser, options?: ExperimentEvaluationOptions): Experiment;
    getLayer(name: string, user: StatsigUser, options?: LayerEvaluationOptions): Layer;
    logEvent(eventOrName: StatsigEvent | string, user: StatsigUser, value?: string | number, metadata?: Record<string, string>): void;
    protected _primeReadyRipcord(): void;
    private _initializeAsyncImpl;
    private _finalizeUpdate;
    private _normalizeUser;
    private _runPostUpdate;
}
export {};
