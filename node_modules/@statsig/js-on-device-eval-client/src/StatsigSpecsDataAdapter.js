"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatsigSpecsDataAdapter = void 0;
const client_core_1 = require("@statsig/client-core");
const Network_1 = require("./Network");
class StatsigSpecsDataAdapter extends client_core_1.DataAdapterCore {
    constructor() {
        super('SpecsDataAdapter', 'specs');
        this._network = null;
    }
    attach(sdkKey, options, network) {
        super.attach(sdkKey, options, network);
        if (network !== null && network instanceof Network_1.default) {
            this._network = network;
        }
        else {
            this._network = new Network_1.default(options !== null && options !== void 0 ? options : {});
        }
    }
    getDataAsync(current, options) {
        return this._getDataAsyncImpl(current, undefined, options);
    }
    prefetchData(options) {
        return this._prefetchDataImpl(undefined, options);
    }
    _fetchFromNetwork(_current, _user, options) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            return ((_b = (yield ((_a = this._network) === null || _a === void 0 ? void 0 : _a.fetchConfigSpecs(this._getSdkKey(), options === null || options === void 0 ? void 0 : options.priority)))) !== null && _b !== void 0 ? _b : null);
        });
    }
    _getCacheKey() {
        const key = (0, client_core_1._getStorageKey)(this._getSdkKey());
        return `${client_core_1.DataAdapterCachePrefix}.${this._cacheSuffix}.${key}`;
    }
    _isCachedResultValidFor204(result, _user) {
        // Simply having a cache value makes it valid
        return result.data.length > 0;
    }
}
exports.StatsigSpecsDataAdapter = StatsigSpecsDataAdapter;
